ncat_proxy.c: In function `ncat_http_server':
ncat_proxy.c:163: warning: dereferencing type-punned pointer will break strict-aliasing rules

--- nmap/ncat/ncat_proxy.c
+++ nmap/ncat/ncat_proxy.c
@@ -148,7 +148,7 @@ static int handle_method(struct socket_buffer *client_sock,
 int ncat_http_server(void)
 {
     int c, s;
-    size_t sslen;
+    socklen_t sslen;
     union sockaddr_u conn;
 
 #ifndef WIN32
@@ -160,7 +160,7 @@ int ncat_http_server(void)
     for (;;) {
         sslen = sizeof(conn.storage);
 
-        c = accept(s, &conn.sockaddr, (socklen_t *) &sslen);
+        c = accept(s, &conn.sockaddr, &sslen);
 
         if (c == -1) {
             if (errno == EINTR)

nmap_dns.cc: In function `void parse_resolvdotconf()':
nmap_dns.cc:951: warning: unsigned int format, different type arg (arg 4)

--- nmap/nmap_dns.cc
+++ nmap/nmap_dns.cc
@@ -948,7 +948,7 @@ static void parse_resolvdotconf() {
   }
 
   /* Customize a sscanf format to sizeof(ipaddr). */
-  Snprintf(fmt, sizeof(fmt), "nameserver %%%us", sizeof(ipaddr));
+  Snprintf(fmt, sizeof(fmt), "nameserver %%%us", (unsigned int)sizeof(ipaddr));
 
   while (fgets(buf, sizeof(buf), fp)) {
     tp = buf;

The following hunk fixes:
traceroute.cc: In member function `void TracerouteState::read_replies(long int)':
traceroute.cc:1031: warning: 'header_len' might be used uninitialized in this function

--- nmap/nmap_error.h
+++ nmap/nmap_error.h
@@ -122,10 +122,12 @@ extern "C" {
 #endif
 
 void fatal(const char *fmt, ...)
+     __attribute__ ((noreturn))
      __attribute__ ((format (printf, 1, 2)));
 void error(const char *fmt, ...)
      __attribute__ ((format (printf, 1, 2)));
 void pfatal(const char *err, ...)
+     __attribute__ ((noreturn))
      __attribute__ ((format (printf, 1, 2)));
 void gh_perror(const char *err, ...)
      __attribute__ ((format (printf, 1, 2)));
